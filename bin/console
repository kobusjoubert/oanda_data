#!/usr/bin/env ruby
root = File.expand_path('../lib', File.dirname(__FILE__))
$: << root # Same as `$LOAD_PATH << root`

require 'bundler/setup' # Set up gems listed in the Gemfile.
require 'logger'
require 'json'
require 'redis'
require 'bunny'
require 'sneakers'
require 'sneakers/runner'
require 'sneakers/handlers/maxretry'
require 'sneakers/metrics/logging_metrics'
require 'aws-sdk-s3'
require 'oanda_data'

Bundler.require(:default, ENV['APP_ENV'])

# Logger.
$logger = Logger.new(ENV['LOG_OUTPUT'] || $stdout)
$logger.level = ENV['APP_ENV'] == 'development' ? Logger::DEBUG : Logger::INFO

# Redis.
$redis = Redis.new(url: ENV['REDIS_URL'])

# RabbitMQ Publisher.
url_publisher = ENV['CLOUDAMQP_URL'] || 'amqp://guest:guest@localhost:5672'
$rabbitmq_connection = Bunny.new(url_publisher)
$rabbitmq_connection.start
$rabbitmq_channel = $rabbitmq_connection.create_channel
$rabbitmq_exchange = $rabbitmq_channel.direct('oanda_app', durable: true)

# These queues are bound by Sneakers.

# qd_data_run = $rabbitmq_channel.queue('qd_data_run', durable: true, auto_delete: false)
# qd_data_run.bind($rabbitmq_exchange, routing_key: 'qd_data_run')

# RabbitMQ Worker.
sneakers_options = {
  connection: Bunny.new(ENV['CLOUDAMQP_URL'] || 'amqp://guest:guest@localhost:5672'),
  amqp: ENV['CLOUDAMQP_URL'] || 'amqp://guest:guest@localhost:5672',
  env: ENV['APP_ENV'] || 'development', # Worker environment.
  workers: (ENV['RABBIT_WORKERS_PER_CPU'] || 1).to_i,
  threads: (ENV['RABBIT_WORKER_THREADS_PER_CPU'] || 1).to_i,
  prefetch: (ENV['RABBIT_WORKER_THREADS_PER_CPU'] || 1).to_i,
  timeout_job_after: 5,
  handler: Sneakers::Handlers::Maxretry,
  heartbeat: 2,
  exchange: 'oanda_app',
  metrics: Sneakers::Metrics::LoggingMetrics.new,
  log: ENV['LOG_OUTPUT'] || $stdout
}

Sneakers.configure(sneakers_options)
Sneakers.logger.level = Logger::INFO

# You can add fixtures and/or initialization code here to make experimenting
# with your gem easier. You can also use a different console, if you like.

# (If you use this, don't forget to add pry to your Gemfile!)
# require "pry"
# Pry.start

require 'irb'
IRB.start
